"use strict";
self["webpackHotUpdatepolydomjs"]("stories-Polygon-stories",{

/***/ "./src/geometry/geometry.methods.ts":
/*!******************************************!*\
  !*** ./src/geometry/geometry.methods.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   measure: () => (/* binding */ measure),
/* harmony export */   ngon: () => (/* binding */ ngon),
/* harmony export */   rad: () => (/* binding */ rad),
/* harmony export */   ray: () => (/* binding */ ray)
/* harmony export */ });
/**
 * cast a ray from a particular point at a specified angle and distance. 
 * @param angle 
 * @param radius 
 * @param center 
 * @returns XY
 */
const ray = (angle, radius, center) => [Math.cos(angle) * radius + center[0], Math.sin(angle) * radius + center[1]];

/**
 * Create the points to generate an ngon
 * @param sides 
 * @param radius 
 * @param center 
 * @returns XY[]
 */
const ngon = (sides, radius, rotation, center) => {
  const radian = 2 * Math.PI / sides;
  return new Array(sides).fill(0).map((_, i) => ray(radian * i + rotation, radius, center));
};

/**
 * Just a convenience method to create radians from degrees
 * @param deg 
 * @returns radians
 */
const rad = deg => deg * (Math.PI / 180);

/**
 * Returns a cubic [minX minY, distanceX, distanceY]
 * @param points 
 */
const measure = points => {};

/***/ })

});
//# sourceMappingURL=stories-Polygon-stories.816489d9dd5fa4bcee08.hot-update.js.map