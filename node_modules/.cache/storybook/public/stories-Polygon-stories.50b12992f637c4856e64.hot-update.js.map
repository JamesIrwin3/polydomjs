{"version":3,"file":"stories-Polygon-stories.50b12992f637c4856e64.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AAAA;AAEA;AAIA;AAHA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAVA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA","sources":["webpack://polydomjs/./src/components/Polygon/Polygon.tsx","webpack://polydomjs/./src/geometry/geometry.methods.ts"],"sourcesContent":["import React, { FC } from 'react';\nimport { PolygonProps } from './Polygon.types';\nimport { draw } from '../../svg/svg.methods';\nimport { ngon, rad } from '../../geometry';\n\nexport const Polygon: FC<PolygonProps> = ({\n\tsides = 6,\n\trotation = 0,\n\tscale = 1\n}) => {\n\tconst points = ngon(sides, scale, rad(rotation), [0, 0]);\n\n\treturn (<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox='-1 -1 2 2' width=\"100px\" height=\"100px\">\n\t\t<path d={draw(ngon(sides, scale, rotation * (Math.PI/180), [0, 0]))} fill=\"#f00\"/>\n\t</svg>)\n}","import { Cubic, XY } from \"./geometry.types\"\n\n/**\n * cast a ray from a particular point at a specified angle and distance. \n * @param angle \n * @param radius \n * @param center \n * @returns XY\n */\nexport const ray = (angle: number, radius: number, center: XY): XY => ([\n\tMath.cos(angle) * radius + center[0],\n\tMath.sin(angle) * radius + center[1]\n]);\n\n/**\n * Create the points to generate an ngon\n * @param sides \n * @param radius \n * @param center \n * @returns XY[]\n */\nexport const ngon = (sides: number, radius: number, rotation: number, center: XY): XY[] => {\n\tconst radian = 2*Math.PI/sides;\n\treturn new Array(sides).fill(0).map((_, i) => ray(radian * i + rotation, radius, center));\n}\n\n/**\n * Just a convenience method to create radians from degrees\n * @param deg \n * @returns radians\n */\nexport const rad = (deg: number) => deg * (Math.PI/180);\n\n/**\n * Returns a cubic [minX minY, distanceX, distanceY]\n * @param points \n */\nexport const measure = (points: number[][]): Cubic => {\n\tconst min = [0, 0];\n\tconst max = [0, 0];\n\tfor(let i = 0; i<points.length; i++){\n\t\tmin\n\t}\n\treturn [...min, max[0]*2, max[1]*2]\n}\n\nexport const min = (p1: XY, p2: XY): XY => [Math.min(p1[0], p2[0]), Math.min(p1[1], p2[1])];\n\nexport const max = (p1: XY, p2: XY): XY => [Math.max(p1[0], p2[0]), Math.max(p1[1], p2[1])];\n\nexport const multiply = (point: XY, multiplier: XY | number) : XY => {\n\tconst mult = typeof multiplier === 'number' ? new Array(2).fill(multiplier):multiplier;\n\treturn point.map((v, i) => v*mult[i]) as XY;\n}"],"names":[],"sourceRoot":""}