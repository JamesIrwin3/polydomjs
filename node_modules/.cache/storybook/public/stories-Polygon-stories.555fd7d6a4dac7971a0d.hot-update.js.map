{"version":3,"file":"stories-Polygon-stories.555fd7d6a4dac7971a0d.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AASA;AARA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAxBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACzBA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AAYA;AAXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAzBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;;;;;;;;;;;;;;;;;;;;ACDA;AAEA;AAAA;AAEA;AAKA;AAJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AATA;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;ACLA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACHA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1JA","sources":["webpack://polydomjs/./src/components/Polygon/PolyImg.tsx","webpack://polydomjs/./src/components/Polygon/Polygon.methods.ts","webpack://polydomjs/./src/components/Polygon/Polygon.tsx","webpack://polydomjs/./src/components/Polygon/index.ts","webpack://polydomjs/./src/components/Svg/Path.tsx","webpack://polydomjs/./src/components/Svg/Svg.methods.ts","webpack://polydomjs/./src/components/Svg/Svg.tsx","webpack://polydomjs/./src/components/Svg/index.ts","webpack://polydomjs/./src/geometry/geometry.methods.ts","webpack://polydomjs/./src/geometry/index.ts"],"sourcesContent":["import React, { FC, useEffect, useRef } from \"react\";\nimport { PolyImgProps } from \"./Polygon.types\";\nimport { Svg, Path } from \"../Svg\";\nimport { useNgon } from \"./Polygon.methods\";\nimport { rad } from \"../../geometry\";\n\nexport const PolyImg: FC<PolyImgProps> = ({\n\tsides = 6,\n\trotation = 0,\n\tscale = 1,\n\tcornerRadius = 0,\n\tstroke = 'currentColor',\n\tstrokeWidth = 0.1,\n\timage,\n\timageScaleFactor = 1\n}) => {\n\tconst [points, viewBox, scaledStrokeWidth] = useNgon(sides, scale, rad(rotation), cornerRadius, strokeWidth);\n\tconst ref = useRef(null);\n\treturn (<Svg \n\tviewBox={viewBox}\n\twidth='100%'\n\theight='100%'>\n\t\t<defs>\n\t\t\t<mask id=\"path-mask\">\n\t\t\t\t<Path {...{points, fill:'#fff', stroke: '#000', strokeWidth: scaledStrokeWidth}}/>\n\t\t\t</mask>\n\t\t</defs>\n\t\t<image x={strokeWidth} y={strokeWidth} width={viewBox[2]-strokeWidth} height={viewBox[3]-strokeWidth} xlinkHref={image} mask='url(#path-mask)' transform={`scale(${imageScaleFactor})`} preserveAspectRatio=\"xMidYMid slice\"/>\n\t\t<Path {...{points, fill:'transparent', stroke, strokeWidth:scaledStrokeWidth}}/>\n\t</Svg>)\n}","import { ReactElement, RefObject, useEffect, useRef } from \"react\";\nimport { ngon, translate, Cubic, multiply, add, divide } from \"../../geometry\";\nimport { IconType } from 'react-icons';\n\nexport const useNgon = (sides: number, scale:number, rotation: number, cornerRadius: number, strokeWidth: number): [number[][], Cubic, number] => {\n\tconst [ssw, scr] = multiply([strokeWidth, cornerRadius], scale);\n\tconst radius = scale/2;\n\tconst [cpts, vb] = ngon(sides, radius, rotation, scr, [0, 0]);\n\tconst hsw = ssw/2;\n\tconst bvb: Cubic = add(vb, [-hsw, -hsw, ssw, ssw]) as Cubic;\n\tconst points = translate(cpts, [-bvb[0], -bvb[1], -bvb[0], -bvb[1]])\n\treturn [points, [0, 0, bvb[2], bvb[3]], ssw];\n}\n\nexport const useIcon = (icon: IconType, scale:number, inCircleRadius: number): RefObject<SVGGElement> => {\n\tconst ref = useRef(null);\n\tuseEffect(()=>{\n\t\tconst g = ref.current! as SVGGElement\n\t\tArray.from(g.children).forEach(elem => {\n\t\t\tif(elem.tagName !== 'svg') return;\n\t\t\telem.removeAttribute('width');\n\t\t\telem.removeAttribute('height');\n\t\t});\n\t}, [icon]);\n\treturn ref;\n}","import React, { FC } from 'react';\nimport { PolygonProps } from './Polygon.types';\nimport { ngon, rad, Cubic, subtract, add } from '../../geometry';\nimport { Svg, Path } from '../Svg';\nimport { useNgon } from './Polygon.methods';\n\nexport const Polygon: FC<PolygonProps> = ({\n\tsides = 6,\n\trotation = 0,\n\tscale = 1,\n\tcornerRadius = 0,\n\tfill = '#000',\n\tstroke = '#000',\n\tstrokeWidth = 0.1,\n\twidth = '100%',\n\theight = '100%',\n\tmaskID,\n\tchildren\n}) => {\n\tconst [points, viewBox, scaledStrokeWidth] = useNgon(sides, scale, rad(rotation), cornerRadius, strokeWidth);\n\treturn (<Svg \n\t{...{width, height, viewBox}}>\n\t\t{maskID ? (<defs>\n\t\t\t<mask id={maskID}>\n\t\t\t\t<Path {...{points, fill:'#fff', stroke: '#000', strokeWidth:0, scale}}/>\n\t\t\t</mask>\n\t\t</defs>):null}\n\t\t<Path {...{points, fill, stroke, strokeWidth:scaledStrokeWidth, scale}}/>\n\t\t{children}\n\t\t{children && maskID && (<Path {...{points, fill:'transparent', stroke, strokeWidth:scaledStrokeWidth, scale}}/>)}\n\t</Svg>);\n};","export * from './Polygon';\nexport * from './PolyIcon';\nexport * from './PolyImg';","import React, { FC } from 'react';\nimport { PathProps } from './Path.types';\nimport { draw } from './Svg.methods';\n\nexport const Path: FC<PathProps> = ({\n\tpoints = [],\n\tfill,\n\tstroke,\n\tstrokeWidth\n}) => {\n\treturn (<path\n\td={draw(points)}\n\t{...{fill, stroke, strokeWidth}}/>);\n};","/**\n * creats a paths draw string\n * @param param0 \n * @returns string\n */\nexport const draw = ([f, ...points]: number[][]): string => !f ? '':`M ${f.join(' ')}` + points.map( v => `${v.length == 2 ? 'L':'Q'} ${v.join(' ')}`).join(' ') + ' Z';","import React, { FC } from 'react';\nimport { SvgProps } from './Svg.types';\n\nexport const Svg: FC<SvgProps> = ({\n\tviewBox = [0, 0, 0, 0],\n\twidth,\n\theight,\n\tchildren,\n\tpreserveAspectRatio = 'xMidYMid meet'\n}) => (<svg \nviewBox={viewBox.join(' ')} \nxmlns=\"http://www.w3.org/2000/svg\"\n{...{width, height, preserveAspectRatio}}\n>\n{children}\n</svg>)","export * from './Svg';\nexport * from './Path';","import { Cubic, Operators, XY } from \"./geometry.types\"\n\n/**\n * cast a ray from a particular point at a specified angle and distance. \n * @param angle \n * @param radius \n * @param center \n * @returns XY\n */\nexport const ray = (angle: number, radius: number = 1, center: XY = [0,0]): XY => ([\n\tMath.cos(angle) * radius + center[0],\n\tMath.sin(angle) * radius + center[1]\n]);\n\n/**\n * Create the points to generate an ngon\n * @param sides \n * @param radius \n * @param center \n * @returns XY[]\n */\nexport const ngon = (sides: number, radius: number, rotation: number, cornerRadius: number, center: XY = [0, 0]): [number[][], Cubic] => {\n\tconst radian = 2*Math.PI/sides;\n\tconst interiorRadian = ((Math.PI * (sides-2))/sides)/2\n\tlet points: number[][] = [];\n\tlet minP: XY = [0, 0];\n\tlet maxP: XY = [0, 0];\n\tfor(let i = 0; i<sides; i++){\n\t\tconst angle = radian * i + rotation;\n\t\t\n\t\tconst p = ray(angle, radius, center);\n\t\tif (cornerRadius > 0){\n\t\t\tconst inverseAngle = invert(angle);\n\t\t\tconst p1 = ray(inverseAngle + interiorRadian, cornerRadius, p);\n\t\t\tconst p2 = ray(inverseAngle - interiorRadian, cornerRadius, p);\n\t\t\tpoints = [...points, p1, [...p, ...p2]];\n\t\t} else {\n\t\t\tpoints.push(p);\n\t\t}\n\t\tminP = min(minP, p);\n\t\tmaxP = max(maxP, p);\n\t}\n\treturn [points, [...minP, ...multiply(maxP, 2) as XY]];\n}\n\n/**\n * Just a convenience method to create radians from degrees\n * @param deg \n * @returns radians\n */\nexport const rad = (deg: number) => deg * (Math.PI/180);\n\n/**\n * Returns a cubic [minX minY, distanceX, distanceY]\n * @param points \n */\nexport const measure = (points: XY[]): Cubic => {\n\tlet minP: XY = [0, 0];\n\tlet maxP: XY = [0, 0];\n\tfor(let i = 0; i<points.length; i++){\n\t\tminP = min(minP, points[i]);\n\t}\n\treturn [...minP, ...multiply(maxP, 2)] as Cubic;\n}\n\n/**\n * Finds the minimum values in the two provided XY coordinates\n * @param p1 \n * @param p2 \n * @returns \n */\nexport const min = (p1: XY, p2: XY): XY => [Math.min(p1[0], p2[0]), Math.min(p1[1], p2[1])];\n\n/**\n * Finds the miximum values in the two provided XY coordinates\n * @param p1 \n * @param p2 \n * @returns \n */\nexport const max = (p1: XY, p2: XY): XY => [Math.max(p1[0], p2[0]), Math.max(p1[1], p2[1])];\n\n//MARK mathematical operators\nexport const operators:Operators = {\n\t'+': (a: number, b: number) => a + b,\n\t'-': (a: number, b: number) => a - b,\n\t'*': (a: number, b: number) => a * b,\n\t'/': (a: number, b: number) => a / b\n};\n\n/**\n * A generalized mathematical operator method. This will replicate SIMD operation. I say replicate because SIMD is not possible using javascript as such I do not want to have addition tech debt utilizing the SIMD package. \n * if b is provided as an array it should be equal in length to a otherwise an error will be thrown.\n */\nexport const calc = (operator: keyof Operators, a: number[], b: number | number[]):number[] => {\n\tconst bRay = typeof b === 'number' ? new Array(a.length).fill(b):b;\n\tif(a.length > bRay.length) throw new Error(`Unable to perform ${operator} on items due to mismatched length: A:${a.length} B:${bRay.length}`);\n\treturn a.map((v, i) => operators[operator](v, bRay[i]))\n}\n/**\n * Multiply a point by another point or by a singular number\n * @param point \n * @param multiplier \n * @returns \n */\nexport const multiply = (point: number[], multiplier: number[] | number) : number[] => calc('*', point, multiplier);\n\nexport const add = (point: number[], additor: number[] | number) : number[] => calc('+', point, additor);\n\nexport const divide = (a: number[], b: number | number[]): number[] => calc('/', a, b);\n\nexport const subtract = (a: number[], b: number | number): number[] => calc('-', a, b);\n\n/**\n * translates a point. b should be no less the the largest possible coordinate provided currently this is Cubic\n * @param a \n * @param b \n * @returns \n */\nexport const translate = (a: number[][], b: number[]): number[][] => a.map(v=>add(v, b));\n/**\n * Invert the current angle\n * @param angle \n * @returns \n */\nexport const invert = (angle: number): number => Math.PI + angle;\n\n/**\n * Create a coordinate array with all coodinate points having the same number\n * @param value \n * @param length \n * @returns \n */\nexport const uniform = (value: number, length: number): number[] => new Array(length).fill(value);\n\n/**\n * return the width and height. the return value will be 2 coordinate points between 0 and 1\n * @param sides \n */\nexport const aspect = (sides: number, rotation: number): XY => {\n\tlet dim: XY = [0, 0];\n\tconst angle = 2*Math.PI/sides;\n\tfor (let i = 0; i<sides; i++) {\n\t\tdim = max(ray(angle*i+rotation, 1, [0,0]), ray(angle*i+rotation));\n\t}\n\treturn dim;\n}\n\n/**\n * return the side length based on the number of sides and a circum radius assumed to be 0.5 i.e 1 total size\n * @param sides\n * @returns number\n */\nexport const edge = (sides: number) => Math.sin(Math.PI/sides);\n\nexport const apothem = (sides:number) => edge(sides)/(2*Math.tan(Math.PI/sides));\n\n","export * from './geometry.methods';\nexport * from './geometry.types';"],"names":[],"sourceRoot":""}