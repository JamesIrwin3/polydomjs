{"version":3,"file":"stories-Polygon-stories.b66a1f4812fa63a122a3.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://polydomjs/./src/geometry/geometry.methods.ts"],"sourcesContent":["import { Cubic, Operators, XY } from \"./geometry.types\"\n\n/**\n * cast a ray from a particular point at a specified angle and distance. \n * @param angle \n * @param radius \n * @param center \n * @returns XY\n */\nexport const ray = (angle: number, radius: number, center: XY): XY => ([\n\tMath.cos(angle) * radius + center[0],\n\tMath.sin(angle) * radius + center[1]\n]);\n\n/**\n * Create the points to generate an ngon\n * @param sides \n * @param radius \n * @param center \n * @returns XY[]\n */\nexport const ngon = (sides: number, radius: number, rotation: number, cornerRadius: number, center: XY = [0, 0]): [number[][], Cubic] => {\n\tconst radian = 2*Math.PI/sides;\n\tconst interiorRadian = ((Math.PI * (sides-2))/sides)/2\n\tlet points: number[][] = [];\n\tlet minP: XY = [0, 0];\n\tlet maxP: XY = [0, 0];\n\tfor(let i = 0; i<sides; i++){\n\t\tconst angle = radian * i + rotation;\n\t\t\n\t\tconst p = ray(angle, radius, center);\n\t\tif (cornerRadius > 0){\n\t\t\tconst inverseAngle = invert(angle);\n\t\t\tconst p1 = ray(inverseAngle + interiorRadian, cornerRadius, p);\n\t\t\tconst p2 = ray(inverseAngle - interiorRadian, cornerRadius, p);\n\t\t\tpoints = [...points, p1, [...p, ...p2]];\n\t\t} else {\n\t\t\tpoints.push(p);\n\t\t}\n\t\tminP = min(minP, p);\n\t\tmaxP = max(maxP, p);\n\t}\n\treturn [points, [...minP, ...multiply(maxP, 2) as XY]];\n}\n\n/**\n * Just a convenience method to create radians from degrees\n * @param deg \n * @returns radians\n */\nexport const rad = (deg: number) => deg * (Math.PI/180);\n\n/**\n * Returns a cubic [minX minY, distanceX, distanceY]\n * @param points \n */\nexport const measure = (points: XY[]): Cubic => {\n\tlet minP: XY = [0, 0];\n\tlet maxP: XY = [0, 0];\n\tfor(let i = 0; i<points.length; i++){\n\t\tminP = min(minP, points[i]);\n\t}\n\treturn [...minP, ...multiply(maxP, 2)] as Cubic;\n}\n\n/**\n * Finds the minimum values in the two provided XY coordinates\n * @param p1 \n * @param p2 \n * @returns \n */\nexport const min = (p1: XY, p2: XY): XY => [Math.min(p1[0], p2[0]), Math.min(p1[1], p2[1])];\n\n/**\n * Finds the miximum values in the two provided XY coordinates\n * @param p1 \n * @param p2 \n * @returns \n */\nexport const max = (p1: XY, p2: XY): XY => [Math.max(p1[0], p2[0]), Math.max(p1[1], p2[1])];\n\n//MARK mathematical operators\nexport const operators:Operators = {\n\t'+': (a: number, b: number) => a + b,\n\t'-': (a: number, b: number) => a - b,\n\t'*': (a: number, b: number) => a * b,\n\t'/': (a: number, b: number) => a / b\n};\n\n/**\n * A generalized mathematical operator method. This will replicate SIMD operation. I say replicate because SIMD is not possible using javascript as such I do not want to have addition tech debt utilizing the SIMD package. \n * if b is provided as an array it should be equal in length to a otherwise an error will be thrown.\n */\nexport const calc = (operator: keyof Operators, a: number[], b: number | number[]):number[] => {\n\tconst bRay = typeof b === 'number' ? new Array(a.length).fill(b):b;\n\tif(a.length !== bRay.length) throw new Error(`Unable to perform ${operator} on items due to mismatched length: A:${a.length} B:${bRay.length}`);\n\treturn a.map((v, i) => operators[operator](v, bRay[i]))\n}\n/**\n * Multiply a point by another point or by a singular number\n * @param point \n * @param multiplier \n * @returns \n */\nexport const multiply = (point: number[], multiplier: number[] | number) : number[] => calc('*', point, multiplier);\n\nexport const add = (point: number[], additor: number[] | number) : number[] => calc('+', point, additor);\n\n\n/**\n * Invert the current angle\n * @param angle \n * @returns \n */\nexport const invert = (angle: number): number => Math.PI + angle;"],"names":[],"sourceRoot":""}