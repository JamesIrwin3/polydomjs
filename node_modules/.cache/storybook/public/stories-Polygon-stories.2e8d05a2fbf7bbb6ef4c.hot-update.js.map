{"version":3,"file":"stories-Polygon-stories.2e8d05a2fbf7bbb6ef4c.hot-update.js","mappings":";;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sources":["webpack://polydomjs/./src/geometry/geometry.methods.ts"],"sourcesContent":["import { Cubic, XY } from \"./geometry.types\"\n\n/**\n * cast a ray from a particular point at a specified angle and distance. \n * @param angle \n * @param radius \n * @param center \n * @returns XY\n */\nexport const ray = (angle: number, radius: number, center: XY): XY => ([\n\tMath.cos(angle) * radius + center[0],\n\tMath.sin(angle) * radius + center[1]\n]);\n\n/**\n * Create the points to generate an ngon\n * @param sides \n * @param radius \n * @param center \n * @returns XY[]\n */\nexport const ngon = (sides: number, radius: number, rotation: number, center: XY): XY[] => {\n\tconst radian = 2*Math.PI/sides;\n\treturn new Array(sides).fill(0).map((_, i) => ray(radian * i + rotation, radius, center));\n}\n\n/**\n * Just a convenience method to create radians from degrees\n * @param deg \n * @returns radians\n */\nexport const rad = (deg: number) => deg * (Math.PI/180);\n\n/**\n * Returns a cubic [minX minY, distanceX, distanceY]\n * @param points \n */\nexport const measure = (points: number[][]): Cubic => {\n\tconst min = [0, 0];\n\tconst max = [0, 0];\n\tfor(let i = 0; i<points.length; i++){\n\t\tmin\n\t}\n\treturn [...min, max[0]*2, max[1]*2]\n}\n\nexport const min = (p1: XY, p2: XY): XY => [Math.min(p1[0], p2[0]), Math.min(p1[1], p2[1])];"],"names":[],"sourceRoot":""}