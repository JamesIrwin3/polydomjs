"use strict";
self["webpackHotUpdatepolydomjs"]("stories-Polygon-stories",{

/***/ "./src/components/Polygon/Polygon.tsx":
/*!********************************************!*\
  !*** ./src/components/Polygon/Polygon.tsx ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Polygon: () => (/* binding */ Polygon)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _svg_svg_methods__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../svg/svg.methods */ "./src/svg/svg.methods.ts");
/* harmony import */ var _geometry_geometry_methods__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../geometry/geometry.methods */ "./src/geometry/geometry.methods.ts");
/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ "./node_modules/react/jsx-runtime.js");




const Polygon = _ref => {
  let {
    sides = 6
  } = _ref;
  return /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("svg", {
    xmlns: "http://www.w3.org/2000/svg",
    viewBox: "-1 -1 2 2",
    width: "100px",
    height: "100px",
    children: /*#__PURE__*/(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("path", {
      d: (0,_svg_svg_methods__WEBPACK_IMPORTED_MODULE_2__.draw)((0,_geometry_geometry_methods__WEBPACK_IMPORTED_MODULE_3__.ngon)(sides, 1, [0, 0])),
      fill: "#f00"
    })
  });
};
Polygon.displayName = "Polygon";
try {
    // @ts-ignore
    Polygon.displayName = "Polygon";
    // @ts-ignore
    Polygon.__docgenInfo = { "description": "", "displayName": "Polygon", "props": { "sides": { "defaultValue": { value: "6" }, "description": "The number of sides the polygon has", "name": "sides", "required": false, "type": { "name": "number" } } } };
    // @ts-ignore
    if (typeof STORYBOOK_REACT_CLASSES !== "undefined")
        // @ts-ignore
        STORYBOOK_REACT_CLASSES["src/components/Polygon/Polygon.tsx#Polygon"] = { docgenInfo: Polygon.__docgenInfo, name: "Polygon", path: "src/components/Polygon/Polygon.tsx#Polygon" };
}
catch (__react_docgen_typescript_loader_error) { }

/***/ }),

/***/ "./src/geometry/geometry.methods.ts":
/*!******************************************!*\
  !*** ./src/geometry/geometry.methods.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ngon: () => (/* binding */ ngon),
/* harmony export */   ray: () => (/* binding */ ray)
/* harmony export */ });
/**
 * cast a ray from a particular point at a specified angle and distance. 
 * @param angle 
 * @param radius 
 * @param center 
 * @returns XY
 */
const ray = (angle, radius, center) => [Math.cos(angle) * radius + center[0], Math.sin(angle) * radius + center[1]];

/**
 * Create the points to generate an ngon
 * @param sides 
 * @param radius 
 * @param center 
 * @returns 
 */
const ngon = (sides, radius, center) => {
  const radian = 2 * Math.PI / sides;
  return new Array(sides).fill(0).map((_, i) => ray(radian * i, radius, center));
};

/***/ }),

/***/ "./src/svg/svg.methods.ts":
/*!********************************!*\
  !*** ./src/svg/svg.methods.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   draw: () => (/* binding */ draw)
/* harmony export */ });
/**
 * creats a paths draw string
 * @param param0 
 * @returns string
 */
const draw = _ref => {
  let [f, ...points] = _ref;
  return `M ${f.join(' ')}` + points.map(v => `${v.length == 2 ? 'L' : 'Q'} ${v.join(' ')}`).join(' ') + ' Z';
};

/***/ })

});
//# sourceMappingURL=stories-Polygon-stories.12f24b97c594768d788a.hot-update.js.map