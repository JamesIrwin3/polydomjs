{"version":3,"file":"stories-Polygon-stories.3abb1cdfd917aba91343.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AASA;AARA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AA7BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjHA","sources":["webpack://polydomjs/./src/components/Polygon/Polygon.tsx","webpack://polydomjs/./src/geometry/geometry.methods.ts","webpack://polydomjs/./src/geometry/index.ts"],"sourcesContent":["import React, { FC, useEffect, useRef } from 'react';\nimport { DOMElement, PolygonProps } from './Polygon.types';\nimport { draw } from '../../svg/svg.methods';\nimport { ngon, rad } from '../../geometry';\nimport { FaBeer } from 'react-icons/fa';\n\nexport const Polygon: FC<PolygonProps> = ({\n\tsides = 6,\n\trotation = 0,\n\tscale = 1,\n\tcornerRadius = 0,\n\tfillColor = '#000',\n\tstrokeColor = '#000',\n\tlineWidth = 0.1,\n\tchildren = <FaBeer/>\n}) => {\n\tconst [points, viewBox] = ngon(sides, scale, rad(rotation), cornerRadius, [0, 0]);\n\tconst scaledLineWidth = lineWidth * scale;\n\tconst hl = scaledLineWidth > 0 ? scaledLineWidth/2:0;\n\tconst newViewBox = [viewBox[0]-hl, viewBox[1]-hl, viewBox[2]+scaledLineWidth, viewBox[3]+scaledLineWidth];\n\tconst ref = useRef(null);\n\tuseEffect(() => {\n\t\tconst knownPath = ref.current! as SVGPathElement;\n\t\tif(!children) return;\n\t\tconst nextChild = knownPath.nextSibling as DOMElement;\n\t\tconsole.log(nextChild);\n\t\tif(nextChild.tagName === 'svg'){\n\t\t\tconst childViewBox = nextChild.getAttribute('viewBox')?.split(' ').map(v=>parseFloat(v))!;\n\t\t\tconsole.log(\"do something with this\", childViewBox);\n\t\t}\n\t},[])\n\treturn (<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox={newViewBox.join(' ')} width=\"100px\" height=\"100px\">\n\t\t<path d={draw(points)} ref={ref} fill={fillColor} stroke={strokeColor} strokeWidth={scaledLineWidth}/>\n\t\t{children}\n\t</svg>)\n};","import { Cubic, XY } from \"./geometry.types\"\n\n/**\n * cast a ray from a particular point at a specified angle and distance. \n * @param angle \n * @param radius \n * @param center \n * @returns XY\n */\nexport const ray = (angle: number, radius: number, center: XY): XY => ([\n\tMath.cos(angle) * radius + center[0],\n\tMath.sin(angle) * radius + center[1]\n]);\n\n/**\n * Create the points to generate an ngon\n * @param sides \n * @param radius \n * @param center \n * @returns XY[]\n */\nexport const ngon = (sides: number, radius: number, rotation: number, cornerRadius: number, center: XY = [0, 0]): [number[][], Cubic] => {\n\tconst radian = 2*Math.PI/sides;\n\tconst interiorRadian = ((Math.PI * (sides-2))/sides)/2\n\tlet points: number[][] = [];\n\tlet minP: XY = [0, 0];\n\tlet maxP: XY = [0, 0];\n\tfor(let i = 0; i<sides; i++){\n\t\tconst angle = radian * i + rotation;\n\t\t\n\t\tconst p = ray(angle, radius, center);\n\t\tif (cornerRadius > 0){\n\t\t\tconst inverseAngle = invert(angle);\n\t\t\tconst p1 = ray(inverseAngle + interiorRadian, cornerRadius, p);\n\t\t\tconst p2 = ray(inverseAngle - interiorRadian, cornerRadius, p);\n\t\t\tpoints = [...points, p1, [...p, ...p2]];\n\t\t} else {\n\t\t\tpoints.push(p);\n\t\t}\n\t\tminP = min(minP, p);\n\t\tmaxP = max(maxP, p);\n\t}\n\treturn [points, [...minP, ...multiply(maxP, 2) as XY]];\n}\n\n/**\n * Just a convenience method to create radians from degrees\n * @param deg \n * @returns radians\n */\nexport const rad = (deg: number) => deg * (Math.PI/180);\n\n/**\n * Returns a cubic [minX minY, distanceX, distanceY]\n * @param points \n */\nexport const measure = (points: XY[]): Cubic => {\n\tlet minP: XY = [0, 0];\n\tlet maxP: XY = [0, 0];\n\tfor(let i = 0; i<points.length; i++){\n\t\tminP = min(minP, points[i]);\n\t}\n\treturn [...minP, ...multiply(maxP, 2)] as Cubic;\n}\n\n/**\n * Finds the minimum values in the two provided XY coordinates\n * @param p1 \n * @param p2 \n * @returns \n */\nexport const min = (p1: XY, p2: XY): XY => [Math.min(p1[0], p2[0]), Math.min(p1[1], p2[1])];\n\n/**\n * Finds the miximum values in the two provided XY coordinates\n * @param p1 \n * @param p2 \n * @returns \n */\nexport const max = (p1: XY, p2: XY): XY => [Math.max(p1[0], p2[0]), Math.max(p1[1], p2[1])];\n\n//MARK mathematical operators\nexport const operators = {\n\t'+': (a: number, b: number) => a + b,\n\t'-': (a: number, b: number) => a - b,\n\t'*': (a: number, b: number) => a * b,\n\t'/': (a: number, b: number) => a / b\n}\n\n/**\n * Multiply a point by another point or by a singular number\n * @param point \n * @param multiplier \n * @returns \n */\nexport const multiply = (point: number[], multiplier: number[] | number) : number[] => {\n\tconst mult = typeof multiplier === 'number' ? new Array(point.length).fill(multiplier):multiplier;\n\tif (mult.length !== point.length) throw `Unable to multiply non parallel arrays ${point.length} ${mult.length}`;\n\treturn point.map((v, i) => v*mult[i]);\n}\n\nexport const add = (point: number[], additor: number[] | number) : number[] => {\n\tconst additing = typeof additor === 'number' ? new Array(point.length).fill(additor):additor;\n\tif (additing.length !== point.length) throw `Unable to add non parallel arrays ${point.length} ${additing.length}`;\n\treturn point.map((v, i) => v*additing[i]);\n}\n\n\n/**\n * Invert the current angle\n * @param angle \n * @returns \n */\nexport const invert = (angle: number): number => Math.PI + angle;","export * from './geometry.methods';\nexport * from './geometry.types';"],"names":[],"sourceRoot":""}